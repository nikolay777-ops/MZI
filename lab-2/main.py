from stb_compulations import *


def split_string_into_blocks(input_string, block_size_bits):
    blocks = []
    current_block = ""
    sizes = []

    for char in input_string:
        char_binary = bin(int(char, 16))[2:].zfill(16)
        current_block += char_binary

        if len(current_block) >= block_size_bits:
            blocks.append(int(current_block, 2))
            sizes.append(len(current_block))
            current_block = ""

    if current_block:
        blocks.append(int(current_block, 2))
    return blocks, sizes


def blocks_into_string(blocks, proto_str):
    proto_srt = ''
    for block in blocks:
        proto = 0b0
        if block != blocks[-1]:
            proto = bin(block)[2:].zfill(128)
        else:
            block_bits = block.bit_length()
            n = (block_bits + 15) // 16 * 16
            proto = bin(block)[2:].zfill(n)
        for i in range(0, len(proto), 16):
            delta = proto[i:i + 16]
            proto_srt += chr(int(hex(int(delta, 2)), 16))
    # Каждый блок кодируется и декодируется в формате UTF16, что позволяет
    # захватить больше языков нежели utf8, также не приходиться думать о
    # переполнении за 8 бит, что можно наблюдать при использовании русской раскладки
    return proto_str


def main():
    change_table = (
        (0x92, 0x05, 0xC4, 0x41, 0x03, 0x8D, 0x55, 0x96, 0xF1, 0x09, 0x6B, 0x2D, 0xE0, 0x5F, 0x73, 0xA8),
        (0x80, 0x62, 0xD7, 0xAB, 0x7C, 0x58, 0x3A, 0xCE, 0x1D, 0x38, 0x4E, 0xB2, 0x29, 0x67, 0x17, 0xFD),
        (0x14, 0x8A, 0xDA, 0x95, 0x19, 0x44, 0x4B, 0xB9, 0xE5, 0x91, 0x2C, 0x46, 0x0B, 0x70, 0xCF, 0xA3),
        (0xBE, 0xF6, 0x81, 0x7B, 0x0A, 0xE7, 0x3E, 0x68, 0x6C, 0x5D, 0x1A, 0x97, 0x4F, 0x66, 0x34, 0x22),
        (0x8B, 0x8C, 0xA1, 0x6F, 0x33, 0xBC, 0x4A, 0x02, 0x2A, 0xA5, 0xD3, 0x51, 0x24, 0xAA, 0xDE, 0xEC),
        (0x32, 0x35, 0x7F, 0x5E, 0x20, 0x8E, 0xFD, 0x9F, 0x77, 0x7A, 0x15, 0xC7, 0x42, 0x0D, 0x23, 0x5A),
        (0x45, 0x74, 0x2F, 0x69, 0x89, 0xE9, 0xBB, 0xF8, 0x8F, 0xE8, 0x11, 0xB0, 0x98, 0xD5, 0x3C, 0xC6),
        (0x43, 0xAF, 0x76, 0x50, 0x94, 0x2B, 0xA2, 0x16, 0x27, 0x31, 0x00, 0xD6, 0x53, 0xDC, 0x1B, 0x90),
        (0x06, 0x04, 0x88, 0xEF, 0x18, 0xF0, 0x61, 0x07, 0x39, 0xD0, 0x1C, 0x30, 0xBA, 0x9E, 0xB7, 0x3F),
        (0xC5, 0xC8, 0xC9, 0xF3, 0x26, 0x7D, 0x4D, 0xD1, 0x71, 0x8E, 0xEA, 0xE1, 0x9A, 0x75, 0x37, 0x99),
        (0xC1, 0xFC, 0x78, 0x64, 0x52, 0xED, 0x1F, 0x10, 0x08, 0x3D, 0xF5, 0x5C, 0xCD, 0x6D, 0xAC, 0x25),
        (0xF4, 0x72, 0xDF, 0xA7, 0x63, 0x2E, 0x9B, 0x59, 0xB6, 0xCB, 0x3B, 0xAD, 0x36, 0xD2, 0x21, 0x6A),
        (0xEB, 0x6E, 0x28, 0xE4, 0x54, 0x82, 0x84, 0xA0, 0x40, 0x93, 0xE3, 0x60, 0x83, 0x85, 0x12, 0xFC),
        (0x48, 0x47, 0x05, 0xB3, 0x56, 0x55, 0xC3, 0xCA, 0x9D, 0x87, 0x31, 0x9C, 0x62, 0x3C, 0x08, 0xD9),
        (0xFB, 0xC2, 0x03, 0x73, 0x49, 0x0C, 0x7E, 0x57, 0x58, 0xBF, 0xD4, 0xF2, 0xD8, 0x30, 0x4C, 0x7C),
        (0x59, 0xE2, 0xF9, 0x86, 0x0F, 0x6F, 0x81, 0xE0, 0x77, 0xA4, 0x4C, 0x2C, 0xA6, 0xE8, 0x10, 0x01)
    )

    with open('input.txt', 'r', encoding='utf8') as file:
        text = file.read()
    bin_text = [hex(ord(elem)) for elem in text]
    bloсks, sizes = split_string_into_blocks(bin_text, 128)
    print(bloсks)

    key = 46457812357893471298374192837498123749182734189273498123741982734981273498127349128734
    sync_mail = 152572295258266561027230676542157080678
    rec = 340282366920938463463374607431768211455

    encsblocks = stb_block_couple_encrypt(key, sync_mail, bloсks, change_table, rec, sizes)
    print(encsblocks)
    blocks = stb_block_couple_decrypt(key, sync_mail, encsblocks, change_table, rec, sizes)
    text = blocks_into_string(blocks, text)
    print(bloсks)

    with open('output.txt', 'w', encoding='utf8') as file:
        file.write(text)


if __name__ == "__main__":
    main()

